// <auto-generated />
using System;
using DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataContext.Migrations
{
    [DbContext(typeof(db_rhContext))]
    [Migration("20220619223047_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataModel.Cargo", b =>
                {
                    b.Property<int>("CargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cargo_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CargoId"), 1L, 1);

                    b.Property<string>("CargoNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cargo_nombre");

                    b.Property<decimal>("CargoSueldoMaximo")
                        .HasColumnType("money")
                        .HasColumnName("cargo_sueldo_maximo");

                    b.Property<decimal>("CargoSueldoMinimo")
                        .HasColumnType("money")
                        .HasColumnName("cargo_sueldo_minimo");

                    b.HasKey("CargoId");

                    b.ToTable("CARGOS", (string)null);
                });

            modelBuilder.Entity("DataModel.Ciudad", b =>
                {
                    b.Property<int>("CiudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ciud_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiudId"), 1L, 1);

                    b.Property<string>("CiudNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ciud_nombre");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("pais_ID");

                    b.HasKey("CiudId")
                        .HasName("PK_Ciudades");

                    b.HasIndex("PaisId");

                    b.ToTable("CIUDADES", (string)null);
                });

            modelBuilder.Entity("DataModel.Departamento", b =>
                {
                    b.Property<int>("DptoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dpto_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DptoId"), 1L, 1);

                    b.Property<string>("DptoNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dpto_nombre");

                    b.HasKey("DptoId")
                        .HasName("PK_Departamentos");

                    b.ToTable("DEPARTAMENTOS", (string)null);
                });

            modelBuilder.Entity("DataModel.Empleado", b =>
                {
                    b.Property<int>("EmplId")
                        .HasColumnType("int")
                        .HasColumnName("empl_ID");

                    b.Property<int>("EmplCargoId")
                        .HasColumnType("int")
                        .HasColumnName("empl_cargo_ID");

                    b.Property<double?>("EmplComision")
                        .HasColumnType("float")
                        .HasColumnName("empl_comision");

                    b.Property<int>("EmplDptoId")
                        .HasColumnType("int")
                        .HasColumnName("empl_dpto_ID");

                    b.Property<string>("EmplEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("empl_email");

                    b.Property<int>("EmplGerenteId")
                        .HasColumnType("int")
                        .HasColumnName("empl_Gerente_ID");

                    b.Property<string>("EmplPrimerNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("empl_primer_nombre");

                    b.Property<string>("EmplSegundoNombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("empl_segundo_nombre");

                    b.Property<decimal>("EmplSueldo")
                        .HasColumnType("money")
                        .HasColumnName("empl_sueldo");

                    b.HasKey("EmplId")
                        .HasName("PK_Empleado");

                    b.HasIndex("EmplCargoId");

                    b.HasIndex("EmplDptoId");

                    b.HasIndex("EmplGerenteId");

                    b.ToTable("EMPLEADOS", (string)null);
                });

            modelBuilder.Entity("DataModel.Historico", b =>
                {
                    b.Property<int>("EmphistId")
                        .HasColumnType("int")
                        .HasColumnName("emphist_ID");

                    b.Property<int>("EmphistCargoId")
                        .HasColumnType("int")
                        .HasColumnName("emphist_cargo_ID");

                    b.Property<int>("EmphistDptoId")
                        .HasColumnType("int")
                        .HasColumnName("emphist_dpto_ID");

                    b.Property<int>("EmphistEmplId")
                        .HasColumnType("int")
                        .HasColumnName("emphist_empl_ID");

                    b.Property<DateTime>("EmphistFechaRetiro")
                        .HasColumnType("date")
                        .HasColumnName("emphist_fecha_retiro");

                    b.HasKey("EmphistId")
                        .HasName("PK_Historico");

                    b.HasIndex("EmphistCargoId");

                    b.HasIndex("EmphistDptoId");

                    b.HasIndex("EmphistEmplId");

                    b.ToTable("HISTORICO", (string)null);
                });

            modelBuilder.Entity("DataModel.Localizacion", b =>
                {
                    b.Property<int>("LocalizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("localiz_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalizId"), 1L, 1);

                    b.Property<int?>("CiudId")
                        .HasColumnType("int")
                        .HasColumnName("ciud_ID");

                    b.Property<string>("LocalizNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("localiz_nombre");

                    b.HasKey("LocalizId")
                        .HasName("PK_localizaciones");

                    b.HasIndex("CiudId");

                    b.ToTable("LOCALIZACIONES", (string)null);
                });

            modelBuilder.Entity("DataModel.LozalizacionDepartamento", b =>
                {
                    b.Property<int>("DptoId")
                        .HasColumnType("int")
                        .HasColumnName("dpto_ID");

                    b.Property<int>("LocalizId")
                        .HasColumnType("int")
                        .HasColumnName("localiz_ID");

                    b.HasIndex("DptoId");

                    b.HasIndex("LocalizId");

                    b.ToTable("LOZALIZACION_DEPARTAMENTO", (string)null);
                });

            modelBuilder.Entity("DataModel.Pais", b =>
                {
                    b.Property<int>("pais_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pais_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pais_ID"), 1L, 1);

                    b.Property<string>("pais_nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pais_nombre");

                    b.HasKey("pais_ID")
                        .HasName("PK_Pais");

                    b.ToTable("PAISES", (string)null);
                });

            modelBuilder.Entity("DataModel.Ciudad", b =>
                {
                    b.HasOne("DataModel.Pais", "Pais")
                        .WithMany("Ciudades")
                        .HasForeignKey("PaisId")
                        .HasConstraintName("FK_Ciudades_Pais");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("DataModel.Empleado", b =>
                {
                    b.HasOne("DataModel.Cargo", "EmplCargo")
                        .WithMany("Empleados")
                        .HasForeignKey("EmplCargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Empleado_Cargo");

                    b.HasOne("DataModel.Departamento", "EmplDpto")
                        .WithMany("Empleados")
                        .HasForeignKey("EmplDptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Empleado_Departamento");

                    b.HasOne("DataModel.Empleado", "EmplGerente")
                        .WithMany("InverseEmplGerente")
                        .HasForeignKey("EmplGerenteId")
                        .IsRequired()
                        .HasConstraintName("FK_Empleados_Gerente");

                    b.Navigation("EmplCargo");

                    b.Navigation("EmplDpto");

                    b.Navigation("EmplGerente");
                });

            modelBuilder.Entity("DataModel.Historico", b =>
                {
                    b.HasOne("DataModel.Cargo", "EmphistCargo")
                        .WithMany("Historicos")
                        .HasForeignKey("EmphistCargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Historico_Cargo");

                    b.HasOne("DataModel.Departamento", "EmphistDpto")
                        .WithMany("Historicos")
                        .HasForeignKey("EmphistDptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Historico_Departamento");

                    b.HasOne("DataModel.Empleado", "EmphistEmpl")
                        .WithMany("Historicos")
                        .HasForeignKey("EmphistEmplId")
                        .IsRequired()
                        .HasConstraintName("FK_Historico_Empleado");

                    b.Navigation("EmphistCargo");

                    b.Navigation("EmphistDpto");

                    b.Navigation("EmphistEmpl");
                });

            modelBuilder.Entity("DataModel.Localizacion", b =>
                {
                    b.HasOne("DataModel.Ciudad", "Ciud")
                        .WithMany("Localizaciones")
                        .HasForeignKey("CiudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Localizaciones_Ciudad");

                    b.Navigation("Ciud");
                });

            modelBuilder.Entity("DataModel.LozalizacionDepartamento", b =>
                {
                    b.HasOne("DataModel.Departamento", "Dpto")
                        .WithMany()
                        .HasForeignKey("DptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Departamento_Localizacion");

                    b.HasOne("DataModel.Localizacion", "Localiz")
                        .WithMany()
                        .HasForeignKey("LocalizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Localizacion_Departamento");

                    b.Navigation("Dpto");

                    b.Navigation("Localiz");
                });

            modelBuilder.Entity("DataModel.Cargo", b =>
                {
                    b.Navigation("Empleados");

                    b.Navigation("Historicos");
                });

            modelBuilder.Entity("DataModel.Ciudad", b =>
                {
                    b.Navigation("Localizaciones");
                });

            modelBuilder.Entity("DataModel.Departamento", b =>
                {
                    b.Navigation("Empleados");

                    b.Navigation("Historicos");
                });

            modelBuilder.Entity("DataModel.Empleado", b =>
                {
                    b.Navigation("Historicos");

                    b.Navigation("InverseEmplGerente");
                });

            modelBuilder.Entity("DataModel.Pais", b =>
                {
                    b.Navigation("Ciudades");
                });
#pragma warning restore 612, 618
        }
    }
}
